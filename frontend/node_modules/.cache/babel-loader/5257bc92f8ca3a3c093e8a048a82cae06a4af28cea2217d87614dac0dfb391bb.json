{"ast":null,"code":"// AuthService.js\nclass AuthService {\n  async login(credentials) {\n    try {\n      const response = await axios.post(`/api/login`, credentials);\n      if (response.data.token) {\n        this.setToken(response.data.token);\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  removeToken() {\n    localStorage.removeItem('token');\n  }\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  getUser() {\n    const user = localStorage.getItem('user');\n    try {\n      return user ? JSON.parse(user) : null;\n    } catch (error) {\n      console.error('Error parsing user JSON:', error);\n      return null;\n    }\n  }\n  removeUser() {\n    localStorage.removeItem('user');\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["AuthService","login","credentials","response","axios","post","data","token","setToken","setUser","user","error","console","localStorage","setItem","getToken","getItem","removeToken","removeItem","JSON","stringify","getUser","parse","removeUser","isAuthenticated"],"sources":["C:/xampp/htdocs/assessment_test/ui/AuthService.js"],"sourcesContent":["// AuthService.js\r\nclass AuthService {\r\n    async login(credentials) {\r\n      try {\r\n        const response = await axios.post(`/api/login`, credentials);\r\n        if (response.data.token) {\r\n          this.setToken(response.data.token);\r\n          this.setUser(response.data.user);\r\n        }\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error('Error logging in:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  \r\n    setToken(token) {\r\n      localStorage.setItem('token', token);\r\n    }\r\n  \r\n    getToken() {\r\n      return localStorage.getItem('token');\r\n    }\r\n  \r\n    removeToken() {\r\n      localStorage.removeItem('token');\r\n    }\r\n  \r\n    setUser(user) {\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n    }\r\n  \r\n    getUser() {\r\n      const user = localStorage.getItem('user');\r\n      try {\r\n        return user ? JSON.parse(user) : null;\r\n      } catch (error) {\r\n        console.error('Error parsing user JSON:', error);\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    removeUser() {\r\n      localStorage.removeItem('user');\r\n    }\r\n  \r\n    isAuthenticated() {\r\n      const token = this.getToken();\r\n      return !!token;\r\n    }\r\n  }\r\n  \r\n  export default new AuthService();\r\n  "],"mappings":"AAAA;AACA,MAAMA,WAAW,CAAC;EACd,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAE,YAAW,EAAEH,WAAW,CAAC;MAC5D,IAAIC,QAAQ,CAACG,IAAI,CAACC,KAAK,EAAE;QACvB,IAAI,CAACC,QAAQ,CAACL,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC;QAClC,IAAI,CAACE,OAAO,CAACN,QAAQ,CAACG,IAAI,CAACI,IAAI,CAAC;MAClC;MACA,OAAOP,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb;EACF;EAEAH,QAAQA,CAACD,KAAK,EAAE;IACdM,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC;EACtC;EAEAQ,QAAQA,CAAA,EAAG;IACT,OAAOF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,WAAWA,CAAA,EAAG;IACZJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAT,OAAOA,CAACC,IAAI,EAAE;IACZG,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEK,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAC;EACpD;EAEAW,OAAOA,CAAA,EAAG;IACR,MAAMX,IAAI,GAAGG,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;IACzC,IAAI;MACF,OAAON,IAAI,GAAGS,IAAI,CAACG,KAAK,CAACZ,IAAI,CAAC,GAAG,IAAI;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,IAAI;IACb;EACF;EAEAY,UAAUA,CAAA,EAAG;IACXV,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;EACjC;EAEAM,eAAeA,CAAA,EAAG;IAChB,MAAMjB,KAAK,GAAG,IAAI,CAACQ,QAAQ,CAAC,CAAC;IAC7B,OAAO,CAAC,CAACR,KAAK;EAChB;AACF;AAEA,eAAe,IAAIP,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}