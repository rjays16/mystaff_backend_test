{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AuthService from \"../../../AuthService\";\nimport Swal from \"sweetalert2\";\nexport default {\n  name: 'LoginForm',\n  data() {\n    return {\n      email: '',\n      password: '',\n      isLoading: false\n    };\n  },\n  computed: {\n    emailState() {\n      return this.email.includes('@') ? true : false;\n    },\n    passwordState() {\n      return this.password.length >= 8 ? true : false;\n    }\n  },\n  methods: {\n    async login() {\n      if (!this.emailState || !this.passwordState) {\n        return;\n      }\n      this.isLoading = true;\n      try {\n        const {\n          access_token\n        } = await AuthService.login({\n          email: this.email,\n          password: this.password\n        });\n        AuthService.setToken(access_token);\n        this.$router.push('/');\n        Swal.fire({\n          title: 'Success!',\n          text: 'Login successfully',\n          icon: 'success',\n          confirmButtonText: 'OK'\n        });\n      } catch (error) {\n        console.error('Error logging in:', error);\n        console.log(\"incorrect\");\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["AuthService","Swal","name","data","email","password","isLoading","computed","emailState","includes","passwordState","length","methods","login","access_token","setToken","$router","push","fire","title","text","icon","confirmButtonText","error","console","log"],"sources":["C:\\xampp\\htdocs\\assessment_test\\ui\\src\\components\\User\\Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <div class=\"login-form\">\r\n      <h2>Login</h2>\r\n      <b-form @submit.prevent=\"login\">\r\n        <b-form-group label=\"Email\" label-for=\"email\">\r\n          <b-form-input id=\"email\" v-model=\"email\" type=\"email\" required :state=\"emailState\">\r\n            <template #invalid-feedback>\r\n              Please enter a valid email address.\r\n            </template>\r\n          </b-form-input>\r\n        </b-form-group>\r\n\r\n        <b-form-group label=\"Password\" label-for=\"password\">\r\n          <b-form-input id=\"password\" v-model=\"password\" type=\"password\" required :state=\"passwordState\">\r\n            <template #invalid-feedback>\r\n              Password must be at least 8 characters long.\r\n            </template>\r\n          </b-form-input>\r\n        </b-form-group>\r\n\r\n        <b-button type=\"submit\" variant=\"primary\" :disabled=\"isLoading\">\r\n          <b-spinner v-if=\"isLoading\" small></b-spinner>\r\n          Login\r\n        </b-button>\r\n      </b-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AuthService from \"../../../AuthService\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport default {\r\n  name: 'LoginForm',\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      isLoading: false,\r\n    }\r\n  },\r\n  computed: {\r\n    emailState() {\r\n      return this.email.includes('@') ? true : false\r\n    },\r\n    passwordState() {\r\n      return this.password.length >= 8 ? true : false\r\n    },\r\n  },\r\n  methods: {\r\n    async login() {\r\n      if (!this.emailState || !this.passwordState) {\r\n        return\r\n      }\r\n\r\n      this.isLoading = true\r\n\r\n      try {\r\n        const { access_token } = await AuthService.login({\r\n          email: this.email,\r\n          password: this.password,\r\n        })\r\n        AuthService.setToken(access_token)\r\n        this.$router.push('/')\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: 'Login successfully',\r\n          icon: 'success',\r\n          confirmButtonText: 'OK'\r\n        });\r\n      } catch (error) {\r\n        console.error('Error logging in:', error)\r\n        console.log(\"incorrect\")\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.login-form {\r\n  max-width: 400px;\r\n  width: 100%;\r\n  padding: 40px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  margin-bottom: 40px; /* Adjust this value to increase or decrease the bottom spacing */\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-control {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.submit-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.submit-button:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>"],"mappings":";AA+BA,OAAOA,WAAU,MAAO,sBAAsB;AAC9C,OAAOC,IAAG,MAAO,aAAa;AAE9B,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAAC,GAAG,IAAI,IAAG,GAAI,KAAI;IAC/C,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACL,QAAQ,CAACM,MAAK,IAAK,IAAI,IAAG,GAAI,KAAI;IAChD;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI,CAAC,IAAI,CAACL,UAAS,IAAK,CAAC,IAAI,CAACE,aAAa,EAAE;QAC3C;MACF;MAEA,IAAI,CAACJ,SAAQ,GAAI,IAAG;MAEpB,IAAI;QACF,MAAM;UAAEQ;QAAa,IAAI,MAAMd,WAAW,CAACa,KAAK,CAAC;UAC/CT,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC;QACDL,WAAW,CAACe,QAAQ,CAACD,YAAY;QACjC,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC,GAAG;QACrBhB,IAAI,CAACiB,IAAI,CAAC;UACRC,KAAK,EAAE,UAAU;UACjBC,IAAI,EAAE,oBAAoB;UAC1BC,IAAI,EAAE,SAAS;UACfC,iBAAiB,EAAE;QACrB,CAAC,CAAC;MACJ,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK;QACxCC,OAAO,CAACC,GAAG,CAAC,WAAW;MACzB,UAAU;QACR,IAAI,CAACnB,SAAQ,GAAI,KAAI;MACvB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}