{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { mapActions } from 'vuex';\nexport default {\n  data() {\n    return {\n      videoFile: null,\n      isModalVisible: false\n    };\n  },\n  methods: {\n    ...mapActions(['initiateVideoUpload', 'checkUploadStatus']),\n    showModal() {\n      this.isModalVisible = true;\n    },\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    onFileSelected(event) {\n      this.videoFile = event.target.files[0];\n    },\n    handleUpload() {\n      if (this.videoFile) {\n        const formData = new FormData();\n        formData.append('file', this.videoFile);\n        this.initiateVideoUpload(formData).then(video => {\n          Swal.fire({\n            icon: 'info',\n            title: 'Upload Initiated',\n            text: 'Your video upload has started. You can check the status in the video list.',\n            confirmButtonText: 'OK'\n          });\n          this.resetForm();\n          this.$emit('video-upload-initiated', video.id);\n          this.pollUploadStatus(video.id);\n        }).catch(error => {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: error.response?.data?.message || 'An error occurred'\n          });\n        });\n      }\n    },\n    resetForm() {\n      this.videoFile = null;\n      this.isModalVisible = false;\n    },\n    pollUploadStatus(videoId) {\n      const checkStatus = () => {\n        this.checkUploadStatus(videoId).then(({\n          status,\n          progress\n        }) => {\n          if (status === 'completed') {\n            Swal.fire({\n              icon: 'success',\n              title: 'Upload Completed',\n              text: 'Your video has been successfully uploaded.',\n              confirmButtonText: 'OK'\n            });\n          } else if (status === 'failed') {\n            Swal.fire({\n              icon: 'error',\n              title: 'Upload Failed',\n              text: 'There was an error uploading your video.',\n              confirmButtonText: 'OK'\n            });\n          } else {\n            // If still uploading, check again after 5 seconds\n            setTimeout(checkStatus, 5000);\n          }\n        }).catch(error => {\n          console.error('Error checking upload status:', error);\n        });\n      };\n      checkStatus();\n    }\n  }\n};","map":{"version":3,"names":["Swal","mapActions","data","videoFile","isModalVisible","methods","showModal","triggerFileInput","$refs","fileInput","click","onFileSelected","event","target","files","handleUpload","formData","FormData","append","initiateVideoUpload","then","video","fire","icon","title","text","confirmButtonText","resetForm","$emit","id","pollUploadStatus","catch","error","response","message","videoId","checkStatus","checkUploadStatus","status","progress","setTimeout","console"],"sources":["C:\\xampp\\htdocs\\assessment_test\\ui\\src\\components\\Modal\\UploadModal.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <b-modal id=\"upload-video-modal\" v-model=\"isModalVisible\" title=\"Upload Video\" ok-title=\"Upload\" ok-class=\"btn-upload\" @ok=\"handleUpload\">\r\n      <div class=\"custom-file-upload\" @click=\"triggerFileInput\">\r\n        <i class=\"fas fa-cloud-upload-alt\"></i>\r\n        <p>Click to choose a video or drag and drop it here</p>\r\n        <p v-if=\"videoFile\">Selected: {{ videoFile.name }}</p>\r\n      </div>\r\n      <input \r\n        type=\"file\" \r\n        ref=\"fileInput\" \r\n        @change=\"onFileSelected\" \r\n        accept=\"video/*\" \r\n        style=\"display: none;\"\r\n      >\r\n    </b-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Swal from 'sweetalert2';\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      videoFile: null,\r\n      isModalVisible: false,\r\n    };\r\n  },\r\n  methods: {\r\n    ...mapActions(['initiateVideoUpload', 'checkUploadStatus']),\r\n    showModal() {\r\n      this.isModalVisible = true;\r\n    },\r\n    triggerFileInput() {\r\n      this.$refs.fileInput.click();\r\n    },\r\n    onFileSelected(event) {\r\n      this.videoFile = event.target.files[0];\r\n    },\r\n    handleUpload() {\r\n      if (this.videoFile) {\r\n        const formData = new FormData();\r\n        formData.append('file', this.videoFile);\r\n\r\n        this.initiateVideoUpload(formData)\r\n          .then((video) => { \r\n            Swal.fire({\r\n              icon: 'info',\r\n              title: 'Upload Initiated',\r\n              text: 'Your video upload has started. You can check the status in the video list.',\r\n              confirmButtonText: 'OK',\r\n            });\r\n            this.resetForm();\r\n            this.$emit('video-upload-initiated', video.id);\r\n            this.pollUploadStatus(video.id);\r\n          })\r\n          .catch(error => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error',\r\n              text: error.response?.data?.message || 'An error occurred'\r\n            });\r\n          });\r\n      }\r\n    },\r\n    resetForm() {\r\n      this.videoFile = null;\r\n      this.isModalVisible = false;\r\n    },\r\n    pollUploadStatus(videoId) {\r\n      const checkStatus = () => {\r\n        this.checkUploadStatus(videoId)\r\n          .then(({ status, progress }) => {\r\n            if (status === 'completed') {\r\n              Swal.fire({\r\n                icon: 'success',\r\n                title: 'Upload Completed',\r\n                text: 'Your video has been successfully uploaded.',\r\n                confirmButtonText: 'OK',\r\n              });\r\n            } else if (status === 'failed') {\r\n              Swal.fire({\r\n                icon: 'error',\r\n                title: 'Upload Failed',\r\n                text: 'There was an error uploading your video.',\r\n                confirmButtonText: 'OK',\r\n              });\r\n            } else {\r\n              // If still uploading, check again after 5 seconds\r\n              setTimeout(checkStatus, 5000);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error checking upload status:', error);\r\n          });\r\n      };\r\n\r\n      checkStatus();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* ... (styles remain the same) ... */\r\n</style>"],"mappings":"AAoBA,OAAOA,IAAG,MAAO,aAAa;AAC9B,SAASC,UAAS,QAAS,MAAM;AAEjC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,IAAI;MACfC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,GAAGJ,UAAU,CAAC,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;IAC3DK,SAASA,CAAA,EAAG;MACV,IAAI,CAACF,cAAa,GAAI,IAAI;IAC5B,CAAC;IACDG,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACC,KAAK,CAACC,SAAS,CAACC,KAAK,CAAC,CAAC;IAC9B,CAAC;IACDC,cAAcA,CAACC,KAAK,EAAE;MACpB,IAAI,CAACT,SAAQ,GAAIS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACxC,CAAC;IACDC,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAACZ,SAAS,EAAE;QAClB,MAAMa,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACf,SAAS,CAAC;QAEvC,IAAI,CAACgB,mBAAmB,CAACH,QAAQ,EAC9BI,IAAI,CAAEC,KAAK,IAAK;UACfrB,IAAI,CAACsB,IAAI,CAAC;YACRC,IAAI,EAAE,MAAM;YACZC,KAAK,EAAE,kBAAkB;YACzBC,IAAI,EAAE,4EAA4E;YAClFC,iBAAiB,EAAE;UACrB,CAAC,CAAC;UACF,IAAI,CAACC,SAAS,CAAC,CAAC;UAChB,IAAI,CAACC,KAAK,CAAC,wBAAwB,EAAEP,KAAK,CAACQ,EAAE,CAAC;UAC9C,IAAI,CAACC,gBAAgB,CAACT,KAAK,CAACQ,EAAE,CAAC;QACjC,CAAC,EACAE,KAAK,CAACC,KAAI,IAAK;UACdhC,IAAI,CAACsB,IAAI,CAAC;YACRC,IAAI,EAAE,OAAO;YACbC,KAAK,EAAE,OAAO;YACdC,IAAI,EAAEO,KAAK,CAACC,QAAQ,EAAE/B,IAAI,EAAEgC,OAAM,IAAK;UACzC,CAAC,CAAC;QACJ,CAAC,CAAC;MACN;IACF,CAAC;IACDP,SAASA,CAAA,EAAG;MACV,IAAI,CAACxB,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACC,cAAa,GAAI,KAAK;IAC7B,CAAC;IACD0B,gBAAgBA,CAACK,OAAO,EAAE;MACxB,MAAMC,WAAU,GAAIA,CAAA,KAAM;QACxB,IAAI,CAACC,iBAAiB,CAACF,OAAO,EAC3Bf,IAAI,CAAC,CAAC;UAAEkB,MAAM;UAAEC;QAAS,CAAC,KAAK;UAC9B,IAAID,MAAK,KAAM,WAAW,EAAE;YAC1BtC,IAAI,CAACsB,IAAI,CAAC;cACRC,IAAI,EAAE,SAAS;cACfC,KAAK,EAAE,kBAAkB;cACzBC,IAAI,EAAE,4CAA4C;cAClDC,iBAAiB,EAAE;YACrB,CAAC,CAAC;UACJ,OAAO,IAAIY,MAAK,KAAM,QAAQ,EAAE;YAC9BtC,IAAI,CAACsB,IAAI,CAAC;cACRC,IAAI,EAAE,OAAO;cACbC,KAAK,EAAE,eAAe;cACtBC,IAAI,EAAE,0CAA0C;cAChDC,iBAAiB,EAAE;YACrB,CAAC,CAAC;UACJ,OAAO;YACL;YACAc,UAAU,CAACJ,WAAW,EAAE,IAAI,CAAC;UAC/B;QACF,CAAC,EACAL,KAAK,CAACC,KAAI,IAAK;UACdS,OAAO,CAACT,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACvD,CAAC,CAAC;MACN,CAAC;MAEDI,WAAW,CAAC,CAAC;IACf;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}