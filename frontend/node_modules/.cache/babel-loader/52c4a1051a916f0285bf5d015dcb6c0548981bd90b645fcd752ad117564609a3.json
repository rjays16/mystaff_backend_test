{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$data.authenticated ? (_openBlock(), _createBlock(_component_router_view, {\n    key: 0\n  })) : (_openBlock(), _createBlock(_component_router_view, {\n    key: 1\n  }))]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","$data","authenticated","_createBlock","_component_router_view","key"],"sources":["C:\\xampp\\htdocs\\assessment_test\\ui\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view v-if=\"!authenticated\" />\n    <router-view v-else />\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      authenticated: false // Initially assuming user is not authenticated\n    };\n  },\n  created() {\n    this.checkAuthentication();\n  },\n  methods: {\n    checkAuthentication() {\n      // Call your authentication logic here\n      // For example, calling AuthService.isAuthenticated()\n      // This assumes that AuthService.isAuthenticated() returns true if authenticated, false otherwise\n      this.authenticated = AuthService.isAuthenticated();\n    }\n  }\n};\n</script>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;;uBAAbC,mBAAA,CAGM,OAHNC,UAGM,G,CAFgBC,KAAA,CAAAC,aAAa,I,cAAjCC,YAAA,CAAqCC,sBAAA;IAFzCC,GAAA;EAAA,O,cAGIF,YAAA,CAAsBC,sBAAA;IAH1BC,GAAA;EAAA,I","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}