{"ast":null,"code":"import { createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _createCommentVNode(\" ...rest of the template \");\n}","map":{"version":3,"names":["_createCommentVNode"],"sources":["C:\\xampp\\htdocs\\assessment_test\\ui\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <!-- ...rest of the template -->\n</template>\n\n<script>\nimport AddModal from \"@/components/Modal/AddModal.vue\";\nimport EditModal from \"@/components/Modal/EditModal.vue\";\nimport { mapState, mapActions } from 'vuex';\nimport Swal from 'sweetalert2';\n\nexport default {\n  name: 'App',\n  components: { AddModal, EditModal },\n  data() {\n    return {\n      fields: [\n        { key: 'id', label: 'ID' },\n        { key: 'title', label: 'Title' },\n        { key: 'description', label: 'Description' },\n        { key: 'due_date', label: 'Due Date' },\n        { key: 'status', label: 'Status' },\n        { key: 'actions', label: 'Actions' }\n      ],\n      statusOptions: [\n        {value: 1, text: 'Active'},\n        {value: 0, text: 'Expired'}\n      ],\n      showEditModal: false,\n      editedItem: {}\n    }\n  },\n  computed: {\n    ...mapState({\n      products: state => state.products\n    }),\n    productsWithStatus() {\n      return this.products.map(product => ({\n        ...product,\n        status: this.mapStatus(product.status)\n      }));\n    }\n  },\n  methods: {\n    ...mapActions(['getProducts', 'updateProduct']),\n    showModal() {\n      this.$refs.addModal.showModal();\n    },\n    openEditModal(item) {\n      this.editedItem = {...item};\n      this.showEditModal = true;\n    },\n    closeEditModal() {\n      this.showEditModal = false;\n    },\n    async updateEditedItem(updatedItem) {\n      try {\n        const updatedProduct = await this.updateProduct(updatedItem);\n        Swal.fire({\n          title: 'Success!',\n          text: 'Product successfully updated',\n          icon: 'success',\n          confirmButtonText: 'OK'\n        });\n        this.showEditModal = false;\n      } catch (error) {\n        console.error('Error updating product:', error);\n      }\n    },\n    async deleteProduct(id) {\n      try {\n        await this.$store.dispatch('deleteProduct', id);\n        Swal.fire({\n          title: 'Success!',\n          text: 'Product successfully deleted',\n          icon: 'success',\n          confirmButtonText: 'OK'\n        });\n      } catch (error) {\n        console.error('Error deleting product:', error);\n      }\n    },\n    addProduct(newProduct) {\n      this.$store.commit('ADD_PRODUCT', newProduct);\n    },\n    mapStatus(status) {\n      return status === 1 ? 'active' : 'expired';\n    }\n  },\n  created() {\n    this.getProducts();\n  }\n}\n</script>\n\n<style>\n/* ...rest of the styles */\n</style>\n"],"mappings":";;SACEA,mBAAA,6BAAgC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}