{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n  let pos = 0;\n  let end;\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n};\nconst encoder = new TextEncoder();\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of iterable) {\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : await encoder.encode(String(chunk)), chunkSize);\n  }\n};\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n  let bytes = 0;\n  return new ReadableStream({\n    type: 'bytes',\n    async pull(controller) {\n      const {\n        done,\n        value\n      } = await iterator.next();\n      if (done) {\n        controller.close();\n        onFinish();\n        return;\n      }\n      let len = value.byteLength;\n      onProgress && onProgress(bytes += len);\n      controller.enqueue(new Uint8Array(value));\n    },\n    cancel(reason) {\n      onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  });\n};","map":{"version":3,"names":["streamChunk","chunk","chunkSize","len","byteLength","pos","end","slice","encoder","TextEncoder","readBytes","iterable","ArrayBuffer","isView","encode","String","trackStream","stream","onProgress","onFinish","iterator","bytes","ReadableStream","type","pull","controller","done","value","next","close","enqueue","Uint8Array","cancel","reason","return","highWaterMark"],"sources":["C:/xampp/htdocs/mystaff_backend_test/frontend/node_modules/axios/lib/helpers/trackStream.js"],"sourcesContent":["\r\nexport const streamChunk = function* (chunk, chunkSize) {\r\n  let len = chunk.byteLength;\r\n\r\n  if (!chunkSize || len < chunkSize) {\r\n    yield chunk;\r\n    return;\r\n  }\r\n\r\n  let pos = 0;\r\n  let end;\r\n\r\n  while (pos < len) {\r\n    end = pos + chunkSize;\r\n    yield chunk.slice(pos, end);\r\n    pos = end;\r\n  }\r\n}\r\n\r\nconst encoder = new TextEncoder();\r\n\r\nexport const readBytes = async function* (iterable, chunkSize) {\r\n  for await (const chunk of iterable) {\r\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encoder.encode(String(chunk))), chunkSize);\r\n  }\r\n}\r\n\r\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\r\n  const iterator = readBytes(stream, chunkSize);\r\n\r\n  let bytes = 0;\r\n\r\n  return new ReadableStream({\r\n    type: 'bytes',\r\n\r\n    async pull(controller) {\r\n      const {done, value} = await iterator.next();\r\n\r\n      if (done) {\r\n        controller.close();\r\n        onFinish();\r\n        return;\r\n      }\r\n\r\n      let len = value.byteLength;\r\n      onProgress && onProgress(bytes += len);\r\n      controller.enqueue(new Uint8Array(value));\r\n    },\r\n    cancel(reason) {\r\n      onFinish(reason);\r\n      return iterator.return();\r\n    }\r\n  }, {\r\n    highWaterMark: 2\r\n  })\r\n}\r\n"],"mappings":";;;;;;AACA,OAAO,MAAMA,WAAW,GAAG,UAAAA,CAAWC,KAAK,EAAEC,SAAS,EAAE;EACtD,IAAIC,GAAG,GAAGF,KAAK,CAACG,UAAU;EAE1B,IAAI,CAACF,SAAS,IAAIC,GAAG,GAAGD,SAAS,EAAE;IACjC,MAAMD,KAAK;IACX;EACF;EAEA,IAAII,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG;EAEP,OAAOD,GAAG,GAAGF,GAAG,EAAE;IAChBG,GAAG,GAAGD,GAAG,GAAGH,SAAS;IACrB,MAAMD,KAAK,CAACM,KAAK,CAACF,GAAG,EAAEC,GAAG,CAAC;IAC3BD,GAAG,GAAGC,GAAG;EACX;AACF,CAAC;AAED,MAAME,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;AAEjC,OAAO,MAAMC,SAAS,GAAG,gBAAAA,CAAiBC,QAAQ,EAAET,SAAS,EAAE;EAC7D,WAAW,MAAMD,KAAK,IAAIU,QAAQ,EAAE;IAClC,OAAOX,WAAW,CAACY,WAAW,CAACC,MAAM,CAACZ,KAAK,CAAC,GAAGA,KAAK,GAAI,MAAMO,OAAO,CAACM,MAAM,CAACC,MAAM,CAACd,KAAK,CAAC,CAAE,EAAEC,SAAS,CAAC;EAC1G;AACF,CAAC;AAED,OAAO,MAAMc,WAAW,GAAGA,CAACC,MAAM,EAAEf,SAAS,EAAEgB,UAAU,EAAEC,QAAQ,KAAK;EACtE,MAAMC,QAAQ,GAAGV,SAAS,CAACO,MAAM,EAAEf,SAAS,CAAC;EAE7C,IAAImB,KAAK,GAAG,CAAC;EAEb,OAAO,IAAIC,cAAc,CAAC;IACxBC,IAAI,EAAE,OAAO;IAEb,MAAMC,IAAIA,CAACC,UAAU,EAAE;MACrB,MAAM;QAACC,IAAI;QAAEC;MAAK,CAAC,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAE3C,IAAIF,IAAI,EAAE;QACRD,UAAU,CAACI,KAAK,CAAC,CAAC;QAClBV,QAAQ,CAAC,CAAC;QACV;MACF;MAEA,IAAIhB,GAAG,GAAGwB,KAAK,CAACvB,UAAU;MAC1Bc,UAAU,IAAIA,UAAU,CAACG,KAAK,IAAIlB,GAAG,CAAC;MACtCsB,UAAU,CAACK,OAAO,CAAC,IAAIC,UAAU,CAACJ,KAAK,CAAC,CAAC;IAC3C,CAAC;IACDK,MAAMA,CAACC,MAAM,EAAE;MACbd,QAAQ,CAACc,MAAM,CAAC;MAChB,OAAOb,QAAQ,CAACc,MAAM,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE;IACDC,aAAa,EAAE;EACjB,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}